from collections.abc import Generator

from _typeshed import Incomplete

HIDE_CURSOR: str
SHOW_CURSOR: str

class Infinite:
    file: Incomplete
    sma_window: int
    check_tty: bool
    hide_cursor: bool
    index: int
    start_ts: Incomplete
    avg: int
    message: Incomplete
    def __init__(self, message: str = ..., **kwargs) -> None: ...
    def __del__(self) -> None: ...
    def __getitem__(self, key): ...
    @property
    def elapsed(self): ...
    @property
    def elapsed_td(self): ...
    def update_avg(self, n, dt) -> None: ...
    def update(self) -> None: ...
    def start(self) -> None: ...
    def writeln(self, line) -> None: ...
    def finish(self) -> None: ...
    def is_tty(self): ...
    def next(self, n: int = ...) -> None: ...
    iter_value: Incomplete
    def iter(self, it) -> Generator[Incomplete, None, None]: ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_val, exc_tb) -> None: ...

class Progress(Infinite):
    max: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def eta(self): ...
    @property
    def eta_td(self): ...
    @property
    def percent(self): ...
    @property
    def progress(self): ...
    @property
    def remaining(self): ...
    def start(self) -> None: ...
    def goto(self, index) -> None: ...
    iter_value: Incomplete
    def iter(self, it) -> Generator[Incomplete, None, None]: ...
